server.port=8081

spring.kafka.consumer.bootstrap-servers = 127.0.0.1:9092
spring.kafka.consumer.group-id= group_id
spring.kafka.consumer.auto-offset-reset = earliest
spring.kafka.consumer.key-deserializer= org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer = org.apache.kafka.common.serialization.StringDeserializer

spring.kafka.producer.bootstrap-servers = 127.0.0.1:9092
spring.kafka.producer.key-serializer = org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer = org.apache.kafka.common.serialization.StringSerializer


spring.kafka.bootstrap-servers=127.0.0.1:9092


#spring.kafka.properties.security.protocol=SASL_SSL
#spring.kafka.properties.sasl.mechanism=SCRAM-SHA-256
#spring.kafka.properties.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="groupId" password="test";

spring.kafka.consumer.properties.spring.json.trusted.packages=sample.kafka

spring.jpa.open-in-view=false



spring.jpa.generate-ddl=true
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.show-sql=true
spring.datasource.url=jdbc:postgresql://localhost:5432/rtl
spring.datasource.username=postgres
spring.datasource.password=

spring.jpa.hibernate.ddl-auto=create



# user authenticate
username = InventoriesApp
userpass = Password

# admin
useradmin = admin
adminpass = admin

# slide
userslide = slide
slidepass = slide

# Slide URL
slide.url=https://drive.google.com/open?id=1i2qruJERgojKNFRmMnIyVI-VdpFxwPbk

jwt.secret=javainuse
jwt.get.token.uri=/authenticate

spring.main.allow-circular-references=true
